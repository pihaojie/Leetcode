2022 05 31
题目：你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。
思路：借鉴打家劫舍I的思路，两次计算，分别计算从第一家到倒数第二家的最大值，再计算从第二家到最后一家的最大值，然后取最大
代码：
class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==1){
            return nums[0];
        }
        vector<int> dp(n);
        dp[0]=nums[0];
        dp[1]=max(nums[1],nums[0]);
        for(int i=2;i<n-1;i++){
            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);
        }
        int a=dp[n-2];
        vector<int> dp1(n);
        dp[0]=0;
        dp[1]=nums[1]; 
        for(int i=2;i<n;i++){
            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);
        }
        int b=dp.back();
        return max(a,b);
    }
};
