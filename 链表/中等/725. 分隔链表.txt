2022 05 25
题目：给你一个头结点为 head 的单链表和一个整数k，请你设计一个算法将链表分隔为 k 个连续的部分。每部分的长度应该尽可能的相等：任意两部分的长度差距不能超过 1 。这可能会导致有些部分为 null。这 k 个部分应该按照在链表中出现的顺序排列，并且排在前面的部分的长度应该大于或等于排在后面的长度。返回一个由上述 k 部分组成的数组。
思路：先求链表总长度，然后求除和余，然后遍历
代码：
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> ans(k,nullptr);
        if(!head)
            return ans;
        ListNode* p=head;
        int len=1;
        while(head->next){
            len++;
            head=head->next;
        }
        int a=len/k;
        int b=len%k;
        for(int i=0;i<k&&p!=nullptr;i++){
            ans[i]=p;
            int size=a+(i<b?1:0);
            for(int j=1;j<size;j++){
                p=p->next;
            }
            ListNode* res=p->next;
            p->next=nullptr;
            p=res;
        }
        return ans;
    }
};
