2022 04 06
题目:给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的相对顺序应该保持一致 。由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。将最终结果插入 ：nums 的前 k 个位置后返回 k 。不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
思路：使用快慢指针，快指针用来遍历，和前一个数不相等时，则把结果赋值给慢指针，相等则跳过，最后返回慢指针即不重复的元素组
收获：快慢指针的解题思想
时间复杂度：O(N)
代码：
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
    int n=nums.size();
    int slow=1,fast=1;
    while(fast<n)
    {
        if(nums[fast]!=nums[fast-1])
        {
            nums[slow]=nums[fast];
            slow++;
        }
        fast++;
    }
    return slow;
    }
};
