2022 04 11
题目：给你一个无重复元素的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的所有不同组合，并以列表形式返回。你可以按任意顺序返回这些组合。candidates 中的同一个数字可以无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。对于给定的输入，保证和为 target 的不同组合数少于 150 个。
思路：回溯算法，每次循环时分两个支路，即继续用当前的数(为空时即继续为空)和用下一个数，符合条件时则返回，代码中 dfs(candidates, target, ans, combine, idx + 1)为继续用当前的数，也可以理解为跳过，dfs(candidates, target - candidates[idx], ans, combine, idx)为用下一个数，并改变target的值，当target为0时即为返回条件，当达到叶子时，用pop_back返回上一个节点。
应用范围：回溯算法常用来解决 组合 切割 子集 排列 棋盘 等问题，此类问题for循环和普通递归较难解决。
收获：首次接触回溯算法，把回溯算法类比树就较容易理解。
![image](https://user-images.githubusercontent.com/90296160/162649752-9f775788-50c1-4ad0-a4fc-f1501b936ff9.png)
代码：
class Solution {
public:
    void dfs(vector<int>&candidates, int target,int idx,vector<vector<int>>&ans,vector<int>&combine)
    {
        if(idx==candidates.size())
            return;
        if(target==0)
        {
            ans.push_back(combine);
            return;
        }
        dfs(candidates,target,idx+1,ans,combine);
        if(target-candidates[idx]>=0)
        {
            combine.push_back(candidates[idx]);
            dfs(candidates,target-candidates[idx],idx,ans,combine);
            combine.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<vector<int>>ans;
    vector<int>combine;
    dfs(candidates,target,0,ans,combine);
    return ans;
    }
};
