2022 04 06
题目：整数数组 nums 按升序排列，数组中的值互不相同 。在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。
个人感觉：题目想出复杂，结果出简单了，以下分暴力和map两种方法，暴力的方法耗时更少
暴力法：直接循环，耗时短
代码：
class Solution {
public:
    int search(vector<int>& nums, int target) {
    for(int i=0;i<nums.size();i++)
    {
        if(nums[i]==target)
            return i;
    }
    return -1;
    }
};
map法：先insert插入，再遍历查找，两次循环，耗时长
代码：
class Solution {
public:
    int search(vector<int>& nums, int target) {
    map<int,int>hash;
    for(int i=0;i<nums.size();i++)
    {
        hash.insert(make_pair(i,nums[i]));
    }
    for(int i=0;i<nums.size();i++)
    {
        if(hash[i]==target)
            return i;
    }
    return -1;
    }
};
