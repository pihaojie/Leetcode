2022 04 08
题目：给你一个非负整数数组 nums ，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。你的目标是使用最少的跳跃次数到达数组的最后一个位置。假设你总是可以到达数组的最后一个位置。例：输入: nums = [2,3,1,1,4]输出: 2 ，解释: 跳到最后一个位置的最小跳跃数是 2。从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 ：步到达数组的最后一个位置。
思路：设置跳的次数step,目前能跳的最远距离max(max_step,nums[i]+i),设立起跳点end,当end==i时，开始起跳
收获：思路第一次好难想，巧用max求目前能跳到的最远距离。
时间复杂度: O(N)
代码：
class Solution {
public:
    int jump(vector<int>& nums) {
    int step=0,end=0,max_step=0;
    for(int i=0;i<nums.size()-1;i++)
    {
        max_step=max(max_step,i+nums[i]);//目前能跳的最远距离
        if(i==end)
        {
            end=max_step;
            step++;
        }
    }
    return step;
    }
};
