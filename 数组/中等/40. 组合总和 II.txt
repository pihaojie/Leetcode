2022 04 11
题目：给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的每个数字在每个组合中只能使用一次。注意：解集不能包含重复的组合。
思路：先排序，此题和上题的区别在于不能在用已用过的数，最关键代码在于 i>idx&&candidates[i]==candidates[i-1] ，在树的结点往下查找时，若查找下一个数，则idx会加1，因此i==idx，不满足i>idx的条件，不会退出循环，而当继续使用当前数字时，idx不会改变，而由于for循环的i++,因为i会>idx，满足了重复判定的条件，以此来避免使用重复的数字，妙！
收获：对回溯法的更深一步的了解。
代码：
class Solution {
public:
    vector<int>combine;
    vector<vector<int>>ans;
    void dfs(vector<int>&candidates, int target,int idx)
    {
        if(target==0)
        {
            ans.push_back(combine);
            return;
        }
        for(int i=idx;i<candidates.size()&&target-candidates[i]>=0;i++)
        {
            if(i>idx&&candidates[i]==candidates[i-1])
            {
                continue;
            }
            combine.push_back(candidates[i]);
            dfs(candidates,target-candidates[i],i+1);
            combine.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
    sort(candidates.begin(),candidates.end());
    dfs(candidates,target,0);
    return ans;
    }
};
